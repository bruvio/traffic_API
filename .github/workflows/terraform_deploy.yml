name: 'Terraform'

on:
  push:
    branches:
      - '*'
    tags:
       - '*-release'
  pull_request:
    branches:
      - 'master'
      - 'production'
      - '*-release'

env:
  TF_LOG: INFO
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: ./deploy/terraform/
    steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v2
        - name: Set outputs
          id: vars
          run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        - name: Check outputs
          run: echo ${{ steps.vars.outputs.sha_short }}
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        # Install the preferred version of Terraform CLI 
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.0.10

        - name: Terraform Init
          id: init
          run: terraform init -backend=false
          
        - name: Terraform Validate
          id: Validate
          run: terraform validate

        - name: Terraform Format
          id: Format
          run: terraform fmt -check

        - name: Terraform Staging Plan
          id: stag-plan
          if: ${{ github.ref != 'refs/heads/production' }}
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          # if: github.event_name == 'pull_request'
          run: |
            export TF_VAR_ecr_image_api=$ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.sha_short }}
            terraform init
            terraform workspace select staging || terraform workspace new staging 
            terraform plan -no-color

        - name: Terraform Production Plan
          id: prod-plan
          if: ${{ github.ref == 'refs/heads/production' }}
          # if: github.event_name == 'pull_request'
          run: |
            export TF_VAR_ecr_image_api=$ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.sha_short }}
            terraform init
            terraform workspace select production || terraform workspace new production 
            terraform plan -no-color

        - name: add-plan-comment
          id: comment
          uses: actions/github-script@v3
          if: ${{ github.ref == 'refs/heads/master' }}
          # if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.prod-plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
                #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
                #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
                <details><summary>Show Plan</summary>
          
                \`\`\`${process.env.PLAN}\`\`\`
          
                </details>
          
                *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
                github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
                })
        - name: Terraform Staging Apply
          if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/production'
          run: |
            export TF_VAR_ecr_image_api=$ECR_REPO:${{ steps.vars.outputs.sha_short }}
            terraform init
            terraform workspace select staging
            terraform apply -auto-approve

        - name: Terraform Production Apply
          if: github.ref == 'refs/heads/production'
          run: |
            export TF_VAR_ecr_image_api=$ECR_REPO:${{ steps.vars.outputs.sha_short }}
            terraform init
            terraform workspace select production
            terraform apply -auto-approve