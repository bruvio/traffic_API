name: Publish image

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'develop'
    tags:
      - '*-release'
  pull_request:
    branches:
      - 'master'
      - 'production'
      - '*release*'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name : build image and test
      run: docker-compose up -d --build && docker-compose run --rm app sh -c "python manage.py wait_for_db && pytest API/tests/"
  build-push-container-to-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_NAME }}
          password: ${{ secrets.DOCKER_HUB_PSW }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: bruvio/traffic_api
          tags: |
              type=ref,event=branch
              type=sha
              type=sha,prefix={{branch}}
              type=sha,format=long
              type=sha,format=long,prefix={{branch}}
              type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/myimage.tar
      -
        name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar

  push-container-to-ecr:
    runs-on: ubuntu-latest
    needs: build-push-container-to-docker

    steps:
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: bruvio/traffic_api
          tags: |
              type=ref,event=branch
              type=sha
              type=sha,prefix={{branch}}
              type=sha,format=long
              type=sha,format=long,prefix={{branch}}
              type=raw,value=latest
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a

      - name: Check out code
        uses: actions/checkout@v2if: ${{ github.ref != 'refs/heads/master' }}
        .AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: GitHub ref
        id: refs
        run: echo "github.ref"
      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Check outputs
        run: echo ${{ steps.vars.outputs.sha_short }}
      - name: Tag and push latest image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          echo  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag bruvio/traffic_api:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker push  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Tag and push dev image to Amazon ECR
        if: github.ref == 'refs/heads/master' || github.ref == 'ref/heads/production' || github.ref == 'ref/heads/*release*'
        if: ${{ github.ref != 'refs/heads/master' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: | 
          echo  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag bruvio/traffic_api:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker push  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
